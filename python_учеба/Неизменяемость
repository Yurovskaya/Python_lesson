Неизменяемосто в python

Строки неизменяемы. После создания их нельзя модифицировать на месте.
Например:
S = "Spam"
S[0] = 'z'

Результат выполнения:

Сообщение об ошибке " обект str не поддерживает присваивание в отношении элементов

Но мы можем выполнить выражение для создания новых объектов
Например:
S = 'z' + S[1:]

Результат выполнения:
'zpam'

Числы, строки и кортежи неизменяемы
Списки, словари, множества изменяемы

bytearray в языке программирования Python представляет собой изменяемую последовательность байтов. Это означает, что вы можете изменять содержимое массива байтов после его создания. Тип bytearray является частью стандартной библиотеки Python и предоставляет удобный способ работы с данными в виде байтов.

Вот несколько ключевых особенностей bytearray:

Изменяемость:
bytearray можно изменять, добавлять, удалять или изменять значения внутри массива байтов. Это отличает его от неизменяемого типа bytes.

Представление байтов:
bytearray может быть создан из различных источников данных, таких как строки, списка чисел или других bytearray.

Использование ввода-вывода:
bytearray может быть использован для эффективной обработки бинарных данных, например, при работе с файлами или сетевыми протоколами.

Индексирование и срезы:
Массив байтов может быть индексирован и выполнять срезы, аналогично другим последовательностям в Python, таким как строки и списки.

Пример использования bytearray:

# Создание bytearray из строки
my_bytearray = bytearray("Hello, World!", 'utf-8')

# Изменение значения байта
my_bytearray[0] = 72  # ASCII код для 'H'

# Добавление нового байта
my_bytearray.append(33)  # ASCII код для '!'

# Преобразование в список байтов
byte_list = list(my_bytearray)

# Вывод в виде строки
print(my_bytearray.decode('utf-8'))  # Выводит "Hollo, World!"

Обратите внимание, что bytearray часто используется для работы с бинарными данными, 
например, при чтении или записи файлов, взаимодействии с низкоуровневыми сетевыми протоколами или при обработке данных в бинарной форме.
